<testExecutions version="1">
  <file path="src/http/controllers/employee/create.test.ts">
    <testCase name="should create a new employee successfully" duration="45" />
    <testCase name="should return 409 if the employee already exists" duration="8" />
  </file>
  <file path="src/http/controllers/employee/fetch-all.test.ts">
    <testCase name="should fetch all employees successfully" duration="44" />
    <testCase name="should return 500 if there is an internal server error" duration="5" />
  </file>
  <file path="src/http/controllers/employee/find-by-id.test.ts">
    <testCase name="should find employee by ID successfully" duration="40" />
    <testCase name="should return 404 if no employee is found" duration="3" />
  </file>
  <file path="src/http/controllers/employee/update.test.ts">
    <testCase name="should update employee successfully" duration="91" />
    <testCase name="should return 500 if there is an internal server error" duration="6" />
  </file>
  <file path="src/http/controllers/manager/create.test.ts">
    <testCase name="should create a new manager successfully" duration="69" />
    <testCase name="should return 409 if the user already exists" duration="10" />
  </file>
  <file path="src/http/controllers/manager/fetch-all.test.ts">
    <testCase name="should fetch all managers successfully" duration="80" />
    <testCase name="should return 500 if there is an internal server error" duration="26" />
  </file>
  <file path="src/http/controllers/manager/find-by-id.test.ts">
    <testCase name="should return a manager by ID successfully" duration="34" />
    <testCase name="should return 404 if no manager is found" duration="4" />
  </file>
  <file path="src/http/controllers/manager/update.test.ts">
    <testCase name="should update manager successfully" duration="69" />
    <testCase name="should return a custom error message for testing" duration="5" />
  </file>
  <file path="src/http/controllers/product/create.test.ts">
    <testCase name="should create a new product successfully" duration="34" />
    <testCase name="should handle errors correctly" duration="23" />
  </file>
  <file path="src/http/controllers/product/fetch-all.test.ts">
    <testCase name="should fetch all products successfully" duration="57" />
    <testCase name="should return 500 if there is an internal server error" duration="25" />
  </file>
  <file path="src/http/controllers/product/find-by-id.test.ts">
    <testCase name="should find a product by id successfully" duration="84" />
    <testCase name="should return 404 if the product is not found" duration="39" />
    <testCase name="should return 500 if there is an internal server error" duration="37" />
  </file>
  <file path="src/http/controllers/product/inactivate.test.ts">
    <testCase name="should inactivate a product successfully" duration="24" />
    <testCase name="should return 404 if the product is not found" duration="64" />
    <testCase name="should return 500 if there is an internal server error" duration="8" />
  </file>
  <file path="src/http/controllers/product/patch.test.ts">
    <testCase name="should patch a product successfully" duration="48" />
    <testCase name="should return 404 if the product is not found" duration="13" />
    <testCase name="should return 500 if there is an internal server error" duration="4" />
  </file>
  <file path="src/services/employee/create-employee.test.ts">
    <testCase name="Create Employee Service - should be able to create a new employee" duration="114" />
    <testCase name="Create Employee Service - should not allow creating a new employee with an existing email" duration="17" />
  </file>
  <file path="src/services/employee/fetch-all-employee.test.ts">
    <testCase name="Fetch All Employee Service - should be able to fetch all employees" duration="9" />
  </file>
  <file path="src/services/employee/find-employee-by-id.test.ts">
    <testCase name="Find Employee by ID Service - should be able to find an employee by ID" duration="11" />
    <testCase name="Find Employee by ID Service - should return null if employee is not found" duration="1" />
  </file>
  <file path="src/services/employee/find-employee-by-user-id.test.ts">
    <testCase name="Find Employee by User ID Service - should be able to find an employee by User ID" duration="17" />
    <testCase name="Find Employee by User ID Service - should return null if employee with User ID is not found" duration="6" />
  </file>
  <file path="src/services/employee/update-employee.test.ts">
    <testCase name="Update Employee Service - should be able to update an employee" duration="130" />
    <testCase name="Update Employee Service - should throw an error if user is not found" duration="3" />
    <testCase name="Update Employee Service - should throw an error if updating employee fails" duration="19" />
  </file>
  <file path="src/services/manager/create-manager.test.ts">
    <testCase name="Create Manager Service - should be able to create a new manager" duration="284" />
    <testCase name="Create Manager Service - should hash the manager password before saving" duration="473" />
    <testCase name="Create Manager Service - should not allow creating a manager with an existing email" duration="191" />
  </file>
  <file path="src/services/manager/fetch-all-manager.test.ts">
    <testCase name="Fetch All Managers Service - should be able to fetch all managers" duration="30" />
  </file>
  <file path="src/services/manager/find-manager-by-id.test.ts">
    <testCase name="Find Manager By Id Service - should be able to find a manager by ID" duration="3" />
    <testCase name="Find Manager By Id Service - should throw NoRecordsFoundError if manager is not found" duration="1" />
  </file>
  <file path="src/services/manager/find-manager-by-user-id.test.ts">
    <testCase name="Find Manager By User ID Service - should be able to find a manager by user ID" duration="9" />
    <testCase name="Find Manager By User ID Service - should return null if manager is not found" duration="6" />
  </file>
  <file path="src/services/manager/update-manager.test.ts">
    <testCase name="Update Manager Service - should be able to update a manager&apos;s information" duration="93" />
    <testCase name="Update Manager Service - should be able to update manager&apos;s information without changing the password" duration="29" />
    <testCase name="Update Manager Service - should throw NoRecordsFoundError if user is not found" duration="1" />
    <testCase name="Update Manager Service - should throw NoRecordsFoundError if manager is not found" duration="26" />
  </file>
  <file path="src/services/product/create-product.test.ts">
    <testCase name="Create Product Service - should be able to create a new product" duration="4" />
  </file>
  <file path="src/services/product/fetch-all-product.test.ts">
    <testCase name="Fetch All Product Service - should be able to fetch all products" duration="3" />
  </file>
  <file path="src/services/product/fetch-product-by-id.test.ts">
    <testCase name="Fetch Product By Id Service - should be able to fetch product by id" duration="3" />
    <testCase name="Fetch Product By Id Service - should not be able to fetch product with wrong id" duration="1" />
  </file>
  <file path="src/services/product/inactivate-product.test.ts">
    <testCase name="Inactivate Product Service - should be able to inactivate a product by id" duration="5" />
    <testCase name="Inactivate Product Service - should not be able to inactivate a product with wrong id" duration="24" />
  </file>
  <file path="src/services/product/patch-product.test.ts">
    <testCase name="PatchProductService - should update product data if product exists and is active" duration="31" />
    <testCase name="PatchProductService - should throw an error if product does not exist" duration="1" />
    <testCase name="PatchProductService - should throw an error if product is inactive" duration="1" />
  </file>
  <file path="src/services/supplier/create-supplier.test.ts">
    <testCase name="Create Supplier Service - should be able to create a new supplier" duration="7" />
  </file>
  <file path="src/services/supplier/fetch-all-supplier.test.ts">
    <testCase name="Fetch All Supplier Service - should be able to fetch all suppliers" duration="6" />
  </file>
  <file path="src/services/supplier/fetch-many-supplier-by-company-name.test.ts">
    <testCase name="Fetch Many Supplier By Company Name Service - should be able to fetch suppliers by company name" duration="30" />
  </file>
  <file path="src/services/supplier/fetch-many-supplier-by-social-name.test.ts">
    <testCase name="Fetch Many Supplier By Social Name Service - should be able to fetch suppliers by social name" duration="5" />
    <testCase name="Fetch Many Supplier By Social Name Service - should be able to fetch suppliers by multiple social names" duration="0" />
    <testCase name="Fetch Many Supplier By Social Name Service - should throw NoRecordsFoundError if no suppliers are found for the given social name" duration="3" />
  </file>
  <file path="src/services/supplier/find-supplier-by-id.test.ts">
    <testCase name="Find Supplier By Id Service - should be able to find a supplier by ID" duration="3" />
    <testCase name="Find Supplier By Id Service - should throw NoRecordsFoundError if supplier is not found" duration="1" />
  </file>
  <file path="src/services/supplier/patch-supplier.test.ts">
    <testCase name="PatchSupplierService - should update supplier data if supplier exists" duration="19" />
    <testCase name="PatchSupplierService - should throw an error if supplier does not exist" duration="2" />
  </file>
  <file path="src/services/user/authenticate-user.test.ts">
    <testCase name="Authenticate Service - should be able to authenticate" duration="84" />
    <testCase name="Authenticate Service - should not be able to authenticate with wrong email" duration="1" />
    <testCase name="Authenticate Service - should not be able to authenticate with wrong password" duration="20" />
  </file>
  <file path="src/services/user/delete-user.test.ts">
    <testCase name="Delete User Service - should be able to delete a user by ID" duration="13" />
    <testCase name="Delete User Service - should throw an error if the user does not exist" duration="1" />
  </file>
  <file path="src/services/user/get-all-users.test.ts">
    <testCase name="Get All Users Service - should return all users" duration="11" />
  </file>
  <file path="src/services/user/get-user-by-id.test.ts">
    <testCase name="Get User By ID Service - should return the user when the user exists" duration="3" />
    <testCase name="Get User By ID Service - should throw a ResourceNotFoundError when the user does not exist" duration="0" />
  </file>
  <file path="src/services/user/get-user-profile.test.ts">
    <testCase name="Get User Profile Service - should be able to get user profile" duration="119" />
    <testCase name="Get User Profile Service - should not be able to get user profile with wrong id" duration="10" />
  </file>
</testExecutions>